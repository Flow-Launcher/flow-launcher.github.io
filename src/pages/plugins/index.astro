---
import {GET} from "@/pages/plugins.json";
import Plugin from "@/components/plugins/Plugin.astro";
import Layout from "@/layouts/Layout.astro";
import Section from "@/components/Section.astro";
import SectionHeader from "@/components/SectionHeader.astro";
import SectionSubheader from "@/components/SectionSubheader.astro";
import LabelValue from "@/components/plugins/LabelValue.astro";
import {TAGS} from "@/constants";
import featuredPluginIds from "@/data/featured-plugins.yml";
import type { ExtendedPlugin } from "@/pages/plugins/_types";
import Swiper from "@/components/Swiper.astro";

const plugins = await GET().then(v => v.json()) as ExtendedPlugin[];
const featured = plugins
  .filter(v => featuredPluginIds.includes(v.id))
  .sort((a, b) => featuredPluginIds.indexOf(a.id) - featuredPluginIds.indexOf(b.id));

const hasFeaturedPlugins = featured.length > 0;
---

<Layout
  title="Plugins | Flow Launcher"
  description="Explore and discover a variety of plugins for Flow Launcher, enhancing your productivity and customizing your experience."
>
  <Section>
    <SectionHeader>Plugins</SectionHeader>
    <SectionSubheader>Extend Flow Launcher's functionality</SectionSubheader>
  </Section>
  {hasFeaturedPlugins && <Section even>
    <SectionHeader>Featured plugins</SectionHeader>
    <Swiper containsPlugins>
      {featured.map(v => <Plugin plugin={v} class="swiper-slide" minHeight loading="eager"/>)}
    </Swiper>
  </Section>}
  <Section>
    {hasFeaturedPlugins && <SectionHeader>All plugins</SectionHeader>}
    <div class="controls">
      <LabelValue label="Search">
        <input type="text" aria-label="Search" id="search" />
      </LabelValue>

      <LabelValue label="Filter by tags">
        <select aria-label="Filter by tags" id="tags">
          <option value="">All</option>
          {TAGS.map(v => <option value={v}>{v}</option>)}
        </select>
      </LabelValue>
    </div>
    <div id="store" class="plugin-grid">
      {plugins.map(v => <Plugin plugin={v}/>)}
    </div>
    <SectionSubheader>
      <div id="not-found" style="display: none;">No plugins found</div>
    </SectionSubheader>
  </Section>
</Layout>

<style lang="scss">
@use "$styles/breakpoints";

.controls {
    display: grid;
    grid-template-columns: repeat(2, 1fr);
    gap: 24px;
    margin-top: 24px;
    position: sticky;
    top: 68px;
    background-color: var(--bg);
    padding: 12px 0;
}

.controls input,
.controls select {
    width: 100%;
    box-sizing: border-box;
    padding: 12px;
    background-color: var(--bg-alternate);
    border-radius: 8px;
    border: 1px solid var(--sep);
    outline: none;
    color: var(--text);
}

.plugin-grid {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
    gap: 20px;
    margin-top: 24px;
}

@include breakpoints.sm {
    .controls {
        grid-template-columns: 1fr;
        top: 60px;
    }
}
</style>

<script>
import {TAGS} from "@/constants";

const searchInput = document.querySelector("#search") as HTMLInputElement;
const tagsSelect = document.querySelector("#tags") as HTMLSelectElement;
const notFound = document.querySelector("#not-found") as HTMLElement;

const plugins = document.querySelectorAll("#store > .plugin") as NodeListOf<HTMLElement>;

searchInput.addEventListener("input", filterPlugins);
tagsSelect.addEventListener("change", filterPlugins);

const url = new URL(window.location.href);

const searchParam = url.searchParams.get("search") ?? "";
let tagsParam: any = url.searchParams.get("tags") ?? "";

if (!TAGS.includes(tagsParam)) {
  tagsParam = "";
}

searchInput.value = searchParam;
tagsSelect.value = tagsParam;

filterPlugins();

function filterPlugins(): void {
  let foundAtLeastOnePlugin = false;

  const searchValue = searchInput.value.toLowerCase();
  const tagsValue = tagsSelect.value;

  const url = new URL(window.location.href);
  if (searchValue.length > 0) {
    url.searchParams.set("search", searchInput.value);
  } else {
    url.searchParams.delete("search");
  }

  if (tagsValue.length > 0) {
    url.searchParams.set("tags", tagsValue);
  } else {
    url.searchParams.delete("tags");
  }

  history.replaceState(null, "", url);

  for (const plugin of plugins) {
    const title = plugin.querySelector(".name")!.textContent!.toLowerCase();
    const author = plugin.querySelector(".author")!.textContent!.toLowerCase();
    const description = plugin.querySelector(".description")!.textContent!.toLowerCase();
    const tags = plugin.querySelector(".tags")?.textContent;

    const found = (
      title.includes(searchValue) ||
      author.includes(searchValue) ||
      description.includes(searchValue)
    ) && (!tagsValue || tags?.includes(tagsValue) || (tagsValue === "Untagged" && !tags));

    if (found) {
      foundAtLeastOnePlugin = true;
    }

    plugin.style.display = found ? "" : "none";
  }

  if (foundAtLeastOnePlugin) {
    notFound.style.display = "none";
  } else {
    notFound.style.display = "block";
  }
}
</script>
